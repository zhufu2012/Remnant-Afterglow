-ifndef(cfg_dcitywar_hrl).
-define(cfg_dcitywar_hrl, true).

-record(dcitywarCfg, {
	%% 作者:
	%% 领地ID
	%% 与地图id保持一致
	iD,
	%% 怪物攻城刷怪。例如：{序号,怪物id,怪物x坐标,怪物z坐标,朝向}|{序号,怪物id,怪物x坐标,怪物z坐标,朝向}
	monster,
	%% 怪物属性参数(依次找到符合要求的配置)
	%% 格式：
	%% (序号,优先级,怪物类型,区分序号,等级方式,等级参数,属性列,特殊情况)
	%% 序号：无实际意义
	%% 优先级：无实际意义
	%% 怪物类型：0为全部,1为小怪,2为精英
	%% 区分序号：区分同类怪物；0为全部,大于0为区分序号
	%% 等级方式：确定怪物等级获取方式
	%% 0为固定,怪物等级='等级参数'
	%% 1为等同玩家等级,
	%% 怪物等级=（玩家等级/'等级参数'）{向下取整}*'等级参数'
	%% 2为世界等级,怪物等级=max(世界等级,等级参数)；3为传输等级
	%% 属性列号：对应取第几种属性列
	%% 字段HpFold,AttrBase[MonsterAttr]
	%% 特殊情况：0为没有；1为按某玩家生成一份怪物'属性',其他玩家生成一份怪物'生命值'叠加到怪物上；2为组队进入副本中时，按照等级最高的玩家来对应生成怪物属性
	monsterAttr,
	%% 作者:
	%% 领地分级
	%% 3级最高
	%% 2级中等
	%% 1级最低
	level,
	%% 作者:
	%% 领地地图
	%% 与领地id保持一致
	%% 在地图中，前端可直接使用地图id读取领地数据
	mapID,
	%% 该领地关联的上级领地ID
	connect1,
	%% 该领地关联的下级领地ID
	connect2,
	%% 营地传送不同营地传送阵配置。{营地ID,传送阵ID,传送阵刷出坐标X,传送阵刷出坐标Z}
	%% 低级传高级地图ID确定，传送位置程序控制
	%% 高级传低级地图ID与位置均为程序控制
	connectTrigger,
	%% 本字段用来标识各个营地范围，营地加无敌buff范围，配置为{营地ID,中心X坐标,中心z坐标,矩形x轴size的一半,矩形z轴size的一半}
	%% 营地ID：
	%% 1防守大营
	%% 2-5征战营地ABCD
	campingArea,
	%% 本字段用来标识各个营地名称。(营地ID,名称序号)|……
	%% 营地名称=DCityCamping_Name+名称序号（然后读文字表）
	campingName,
	%% 配置营地ID与StartPoint序号。{营地ID,StartPoint序号}。如{1,1}表示营地ID1的防守大营的出生点为StartPoint1
	startPoint,
	%% 营地传送战斗区域的同地图传送阵配置。{营地ID,传送阵ID,传送阵刷出坐标X,传送阵刷出坐标Z}
	campingTeleport,
	%% 准备阶段结束后，在正式战斗阶段中需要取消的动态阻挡的地图ID。注，这里配置的不是配置表上的ID，而是动态阻挡和NPC在地图文件中的唯一ID
	campingBlocker,
	%% 准备阶段结束后，在正式战斗阶段中需要隐藏的npc的地图ID。注，这里配置的不是配置表上的ID，而是动态阻挡和NPC在地图文件中的唯一ID
	campingNPC,
	%% 城门的怪物ID(配置表ID），城门及关联的动态阻挡ID（地图文件ID非配置表ID），传送阵ID（配置表ID非地图文件ID）。按照北门-南门-中门顺序配置。
	doorID,
	%% 城门怪物属性参数(依次找到符合要求的配置)
	%% 格式：
	%% (序号,优先级,怪物类型,区分序号,等级方式,等级参数,属性列,特殊情况)
	%% 序号：无实际意义
	%% 优先级：无实际意义
	%% 怪物类型：0为全部,1为小怪,2为精英
	%% 区分序号：区分同类怪物；0为全部,大于0为区分序号
	%% 等级方式：确定怪物等级获取方式
	%% 0为固定,怪物等级='等级参数'
	%% 1为等同玩家等级,
	%% 怪物等级=（玩家等级/'等级参数'）{向下取整}*'等级参数'
	%% 2为世界等级,怪物等级=max(世界等级,等级参数)；3为传输等级
	%% 属性列号：对应取第几种属性列
	%% 字段HpFold,AttrBase[MonsterAttr]
	%% 特殊情况：0为没有；1为按某玩家生成一份怪物'属性',其他玩家生成一份怪物'生命值'叠加到怪物上；2为组队进入副本中时，按照等级最高的玩家来对应生成怪物属性
	doorAttr,
	%% 城门刷出位置，按照顺序读。{北门坐标X,北门坐标Z,北门朝向}|{南门坐标X,南门坐标Z,南门朝向}|{中门坐标X,中门坐标Z,中门朝向}
	door,
	%% 龙柱等级，龙柱怪物ID：
	%% {龙柱等级,龙柱1ID,序号}|{龙柱等级,龙柱2ID,序号}…
	pillarID,
	%% 占领龙柱，公会积分
	%% 占领一个龙柱后 战盟获得公会积分效率
	%% （龙柱等级，公会积分数，时间秒）
	%% 龙柱等级：
	%% 可以双方战盟来回占领
	guildScore1,
	%% 击杀BOSS，公会积分
	%% 击杀BOSS后，战盟获得的一次性公会积分
	%% 配置：公会积分数
	guildScore2,
	%% 公会积分上限，公会达到该值则胜利
	guildScore,
	%% 击杀玩家(或战车)，个人积分：
	%% 击杀一个敌方玩家获得的个人积分
	playerScore1,
	%% 对龙柱造成伤害获得的个人积分
	%% （个人积分，伤害万分比）
	%% (100,50):对龙柱造成0.5%伤害获得100点积分，不足0.5%不给积分.
	playerScore2,
	%% 占领龙柱获得的个人积分
	playerScore3,
	%% 占领龙柱个人积分
	%% （龙柱等级，积分，时间秒）
	%% (1,1,10):占领龙柱等级为1的公会，参与玩法的公会成员，每10秒给1点积分，不足10秒不给积分.
	playerScore4,
	%% 对BOSS造成伤害获得的个人积分
	%% （个人积分，伤害万分比）
	%% (100,50):对BOSS造成0.5%伤害获得100点积分，不足0.5%不给积分.
	playerScore5,
	%% 击杀BOSS获得的个人积分
	playerScore6,
	%% 龙柱怪物属性参数(依次找到符合要求的配置)
	%% 格式：
	%% (序号,优先级,怪物类型,区分序号,等级方式,等级参数,属性列,特殊情况)
	%% 序号：无实际意义
	%% 优先级：无实际意义
	%% 怪物类型：0为全部,1为小怪,2为精英
	%% 区分序号：区分同类怪物；0为全部,大于0为区分序号
	%% 等级方式：确定怪物等级获取方式
	%% 0为固定,怪物等级='等级参数'
	%% 1为等同玩家等级,
	%% 怪物等级=（玩家等级/'等级参数'）{向下取整}*'等级参数'
	%% 2为世界等级,怪物等级=max(世界等级,等级参数)；3为传输等级
	%% 属性列号：对应取第几种属性列
	%% 字段HpFold,AttrBase[MonsterAttr]
	%% 特殊情况：0为没有；1为按某玩家生成一份怪物'属性',其他玩家生成一份怪物'生命值'叠加到怪物上；2为组队进入副本中时，按照等级最高的玩家来对应生成怪物属性
	pillarAttr,
	%% 龙柱位置
	%% {龙柱1坐标（x,z,朝向）}|{龙柱2坐标（x,z,朝向）}
	pillar,
	%% 龙柱和城门的加血范围
	%% 配置方式：{龙柱或城门id，中心X坐标，中心z坐标，矩形x轴size的一半，矩形z轴size的一半}
	range,
	%% 作者:
	%% 可宣战数量（宣战名额）
	challengeNum,
	%% 作者:
	%% 积分获得值
	%% 时间积分|杀人积分|伤害积分|伤害单位值
	%% 总积分=时间积分*时间段+杀人积分*杀人数+伤害积分*伤害总量/伤害单位值
	%% 时间配在全局表：ManorWarScoreTime
	getScore,
	%% 间隔奖励经验系数：
	%% 每隔一段时间自动获得经验=角色等级标准经验*该系数/100
	%% 计算结果取整
	%% 间隔时间在全局表globalSetup的DCityScoreTime
	expCoef,
	%% 作者:
	%% 战车
	%% （序号，战车ID，变身id）
	%% 序号：可选战车的序号，战车名ChariotName、描述ChariotDesc和图标用该序号区分
	%% 变身id：【TransformModel】ID
	chariot,
	%% 战车刷新位置（序号,X,Z,朝向）
	chariotPosition
}).

-endif.
